#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 14 10:45:23 2023

# GOAL:
    
    Go through the protostar target list and acquire their single exposure 
    metadata. From this metadata, determine the epochs of each object, 
    and construct the urls for each epoch to download the coadds from IRSA.
    Note: if the coadds on command line timeout, we will need to manually 
    download images using the web interface of the coadder tool (https://irsa.ipac.caltech.edu/applications/ICORE/)
    

@author: dzakaria
"""

#%% imports

import pandas as pd
import numpy as np
import pyvo
from astropy.coordinates import SkyCoord 
import astropy.units as u
from astropy.table import vstack, QTable

#%% Read in the table of targets

# directory path

directory = '/users/dzakaria/dzfiles/'
filename = 'targets-daphne.csv'
path = directory + filename
targets_tab = QTable.read(path, format = 'ascii.csv')

#%% Format table (assign units and make SkyCoord object column)

# assign units to columns
targets_tab['ra'].unit= u.hourangle
targets_tab['dec'].unit= u.deg

# make skycoord object column
targets_tab['coord'] = SkyCoord(targets_tab['ra'], targets_tab['dec'], frame='icrs', unit=(u.hourangle, u.deg))



#%%  query_IRSA function 
# make a TAP query to IRSA given: catalog, ra, dec, and radius

def query_IRSA(catalog, ra, dec, rad = 0.5 , columns = '*' ):
    # query base:
    query_base = """
               SELECT {columns}
               FROM {catalog}
               WHERE CONTAINS(POINT('ICRS',crval1, crval2), CIRCLE('ICRS',{ra},{dec},{rad}))=1
               """
    query = query_base.format(columns=columns, catalog=catalog, ra=ra, dec=dec, rad=rad)
    
    # make connection with IRSA
    service = pyvo.dal.TAPService('https://irsa.ipac.caltech.edu/TAP')
    result = service.run_async(query)
    tab = result.to_table()
    return tab


#%% Make a new output table that will contain the object info as well as epochs

# use the targets_tab to read in the correct columns
epochs_tab = Table(targets_tab)

# delete the rows
epochs_tab.remove_rows(range(len(epochs_tab))) # we will fill in rows as we go

# add columns
epochs_tab.add_columns(names=['band', 'date_obs', 'mjd_obs'])
#%% Loop through targets and determine object epochs

for target in range(len(targets_tab))





